name: 🔐 Secure CI/CD Pipeline - FortiStack

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  IMAGE_NAME: fortistack-app
  ECR_REPOSITORY: fortistack-ecr-repo

jobs:
  secret-scan:
    name: 🔍 Gitleaks - Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🔎 Run Gitleaks
        uses: zricethezav/gitleaks-action@v2
        with:
          config-path: gitleaks.toml

  terraform-scan:
    name: 🧠 Checkov - Terraform Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🧪 Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./terraform

  build-and-scan:
    name: 🐳 Docker Build & Trivy Scan
    runs-on: ubuntu-latest
    needs: [secret-scan, terraform-scan]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🛠️ Build Docker Image
        run: docker build -t $IMAGE_NAME .

      - name: 🔍 Trivy - Docker Image Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  deploy:
    name: 🚀 Deploy to EKS (if image is clean)
    needs: build-and-scan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🧩 Setup kubectl
        run: |
          aws eks update-kubeconfig --name fortistack-eks --region $AWS_REGION

      - name: 🚀 Apply K8s Manifests
        run: |
          kubectl apply -f k8s/manifests/
